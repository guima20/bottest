#!/usr/bin/env python3
"""
Teste das fun√ß√µes administrativas do bot unificado
"""

import json
import os

# Carrega vari√°veis de ambiente
try:
    with open('.env', 'r') as f:
        for line in f:
            if line.strip() and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                os.environ[key] = value
except FileNotFoundError:
    pass

CONFIG_FILE = 'config.json'

def load_config():
    """Carrega configura√ß√£o do arquivo JSON."""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Arquivo {CONFIG_FILE} n√£o encontrado")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        return {}

def save_config(config):
    """Salva configura√ß√£o no arquivo JSON."""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print("‚úÖ Configura√ß√£o salva com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√£o: {e}")
        return False

def test_admin_commands():
    """Simula os comandos administrativos"""
    print("üß™ TESTANDO COMANDOS ADMINISTRATIVOS DO BOT UNIFICADO...")
    
    # 1. Mostra configura√ß√£o atual
    print("\n1Ô∏è‚É£ Configura√ß√£o atual:")
    config = load_config()
    print(f"üì∑ Imagem: {config.get('image', 'N/A')}")
    print(f"üìù Texto: {config.get('text', 'N/A')[:50]}...")
    buttons = config.get('buttons', [])
    for i, button in enumerate(buttons, 1):
        print(f"üîò Bot√£o {i}: {button.get('text', 'N/A')} ‚Üí {button.get('url', 'N/A')}")
    
    # 2. Simula /set_text
    print("\n2Ô∏è‚É£ Simulando comando /set_text...")
    original_text = config.get('text', '')
    new_text = "üéâ TEXTO ALTERADO VIA BOT UNIFICADO! üéâ"
    config['text'] = new_text
    
    if save_config(config):
        print(f"‚úÖ Comando /set_text executado: {new_text}")
    else:
        print("‚ùå Falha no comando /set_text")
    
    # 3. Simula /set_button
    print("\n3Ô∏è‚É£ Simulando comando /set_button 1...")
    if 'buttons' not in config:
        config['buttons'] = []
    
    while len(config['buttons']) < 4:
        config['buttons'].append({"text": "Bot√£o", "url": "https://example.com"})
    
    original_button = config['buttons'][0].copy()
    config['buttons'][0] = {
        "text": "üöÄ BOT√ÉO ALTERADO VIA UNIFICADO",
        "url": "https://novo-link-unificado.com"
    }
    
    if save_config(config):
        print(f"‚úÖ Comando /set_button executado: {config['buttons'][0]['text']}")
    else:
        print("‚ùå Falha no comando /set_button")
    
    # 4. Simula /set_image
    print("\n4Ô∏è‚É£ Simulando comando /set_image...")
    original_image = config.get('image', '')
    new_image = "https://nova-imagem-unificada.jpg"
    config['image'] = new_image
    
    if save_config(config):
        print(f"‚úÖ Comando /set_image executado: {new_image}")
    else:
        print("‚ùå Falha no comando /set_image")
    
    # 5. Verifica se tudo foi salvo
    print("\n5Ô∏è‚É£ Verificando se as altera√ß√µes foram salvas...")
    config_check = load_config()
    
    if config_check.get('text') == new_text:
        print("‚úÖ Texto salvo corretamente")
    else:
        print("‚ùå Texto N√ÉO foi salvo")
    
    if config_check.get('image') == new_image:
        print("‚úÖ Imagem salva corretamente")
    else:
        print("‚ùå Imagem N√ÉO foi salva")
    
    if (config_check.get('buttons', [{}])[0].get('text') == "üöÄ BOT√ÉO ALTERADO VIA UNIFICADO"):
        print("‚úÖ Bot√£o salvo corretamente")
    else:
        print("‚ùå Bot√£o N√ÉO foi salvo")
    
    # 6. Restaura configura√ß√£o original
    print("\n6Ô∏è‚É£ Restaurando configura√ß√£o original...")
    config['text'] = original_text
    config['image'] = original_image
    config['buttons'][0] = original_button
    
    if save_config(config):
        print("‚úÖ Configura√ß√£o original restaurada")
    else:
        print("‚ùå Falha ao restaurar configura√ß√£o")
    
    print("\nüéØ TESTE CONCLU√çDO!")

if __name__ == "__main__":
    test_admin_commands()