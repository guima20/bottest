#!/usr/bin/env python3
"""
Executor para ambos os bots do Telegram
Executa o bot principal e o bot administrativo simultaneamente
"""

import asyncio
import logging
import os
import signal
import sys
from concurrent.futures import ThreadPoolExecutor

# Tenta carregar vari√°veis de ambiente de arquivo .env
try:
    from load_env import load_env_file
    load_env_file()
except ImportError:
    pass

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def run_main_bot():
    """Executa o bot principal"""
    try:
        from telegram_bot import main as main_bot_main
        logger.info("Iniciando bot principal...")
        main_bot_main()
    except Exception as e:
        logger.error(f"Erro no bot principal: {e}")

def run_admin_bot():
    """Executa o bot administrativo"""
    try:
        from admin_bot import main as admin_bot_main
        logger.info("Iniciando bot administrativo...")
        admin_bot_main()
    except Exception as e:
        logger.error(f"Erro no bot administrativo: {e}")

def signal_handler(signum, frame):
    """Handler para sinais de interrup√ß√£o"""
    logger.info("Recebido sinal de interrup√ß√£o. Parando bots...")
    sys.exit(0)

def main():
    """Fun√ß√£o principal que executa ambos os bots"""
    # Verifica se os tokens est√£o configurados
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("‚ùå TELEGRAM_BOT_TOKEN n√£o configurado!")
        print("\nüîß Configure as vari√°veis de ambiente:")
        print("export TELEGRAM_BOT_TOKEN='seu_token_do_bot_principal'")
        print("export TELEGRAM_ADMIN_BOT_TOKEN='seu_token_do_bot_admin'")
        print("export ADMIN_IDS='123456789,987654321'  # IDs dos admins separados por v√≠rgula")
        return
    
    if not os.getenv('TELEGRAM_ADMIN_BOT_TOKEN'):
        logger.error("‚ùå TELEGRAM_ADMIN_BOT_TOKEN n√£o configurado!")
        print("\nüîß Configure as vari√°veis de ambiente:")
        print("export TELEGRAM_BOT_TOKEN='seu_token_do_bot_principal'")
        print("export TELEGRAM_ADMIN_BOT_TOKEN='seu_token_do_bot_admin'")
        print("export ADMIN_IDS='123456789,987654321'  # IDs dos admins separados por v√≠rgula")
        return
    
    if not os.getenv('ADMIN_IDS'):
        logger.error("‚ùå ADMIN_IDS n√£o configurado!")
        print("\nüîß Configure as vari√°veis de ambiente:")
        print("export TELEGRAM_BOT_TOKEN='seu_token_do_bot_principal'")
        print("export TELEGRAM_ADMIN_BOT_TOKEN='seu_token_do_bot_admin'")
        print("export ADMIN_IDS='123456789,987654321'  # IDs dos admins separados por v√≠rgula")
        return
    
    # Configura handler para sinais
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ Iniciando sistema de bots do Telegram...")
    
    # Executa ambos os bots em threads separadas
    with ThreadPoolExecutor(max_workers=2) as executor:
        try:
            # Submete ambos os bots para execu√ß√£o
            main_bot_future = executor.submit(run_main_bot)
            admin_bot_future = executor.submit(run_admin_bot)
            
            logger.info("‚úÖ Ambos os bots foram iniciados!")
            logger.info("üì± Bot principal: responde a /start")
            logger.info("üîß Bot administrativo: comandos de configura√ß√£o")
            logger.info("‚èπÔ∏è  Pressione Ctrl+C para parar")
            
            # Aguarda ambos os bots
            main_bot_future.result()
            admin_bot_future.result()
            
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o recebida. Parando bots...")
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado: {e}")
        finally:
            logger.info("üîö Bots finalizados")

if __name__ == '__main__':
    main()