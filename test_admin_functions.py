#!/usr/bin/env python3
"""
Teste das fun√ß√µes administrativas sem usar o bot
"""

import json
import os

# Carrega vari√°veis de ambiente
try:
    with open('.env', 'r') as f:
        for line in f:
            if line.strip() and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                os.environ[key] = value
except FileNotFoundError:
    pass

CONFIG_FILE = 'config.json'

def load_config():
    """Carrega configura√ß√£o do arquivo JSON."""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Arquivo {CONFIG_FILE} n√£o encontrado")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        return {}

def save_config(config):
    """Salva configura√ß√£o no arquivo JSON."""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print("‚úÖ Configura√ß√£o salva com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√£o: {e}")
        return False

def test_admin_functions():
    """Testa as fun√ß√µes administrativas"""
    print("üß™ TESTANDO FUN√á√ïES ADMINISTRATIVAS...")
    
    # 1. Carrega configura√ß√£o atual
    print("\n1Ô∏è‚É£ Carregando configura√ß√£o atual...")
    config = load_config()
    print(f"üìã Config carregado: {len(config)} campos")
    
    if 'text' in config:
        print(f"üìù Texto atual: {config['text'][:50]}...")
    
    # 2. Testa altera√ß√£o de texto
    print("\n2Ô∏è‚É£ Testando altera√ß√£o de texto...")
    original_text = config.get('text', '')
    new_text = "TESTE ADMIN - " + original_text
    config['text'] = new_text
    
    if save_config(config):
        print("‚úÖ Texto alterado e salvo")
    else:
        print("‚ùå Falha ao salvar texto")
    
    # 3. Verifica se foi salvo
    print("\n3Ô∏è‚É£ Verificando se foi salvo...")
    config_check = load_config()
    if config_check.get('text') == new_text:
        print("‚úÖ Altera√ß√£o confirmada no arquivo")
    else:
        print("‚ùå Altera√ß√£o N√ÉO foi salva")
    
    # 4. Testa altera√ß√£o de bot√£o
    print("\n4Ô∏è‚É£ Testando altera√ß√£o de bot√£o...")
    if 'buttons' in config_check and len(config_check['buttons']) > 0:
        original_button_text = config_check['buttons'][0]['text']
        config_check['buttons'][0]['text'] = "TESTE BOT√ÉO - " + original_button_text
        
        if save_config(config_check):
            print("‚úÖ Bot√£o alterado e salvo")
        else:
            print("‚ùå Falha ao salvar bot√£o")
    
    # 5. Verifica novamente
    print("\n5Ô∏è‚É£ Verifica√ß√£o final...")
    final_config = load_config()
    print(f"üìù Texto final: {final_config.get('text', 'N/A')[:50]}...")
    if 'buttons' in final_config and len(final_config['buttons']) > 0:
        print(f"üîò Bot√£o 1: {final_config['buttons'][0]['text'][:30]}...")
    
    # 6. Restaura configura√ß√£o original
    print("\n6Ô∏è‚É£ Restaurando configura√ß√£o original...")
    config['text'] = original_text
    if 'buttons' in config and len(config['buttons']) > 0:
        config['buttons'][0]['text'] = original_button_text
    
    if save_config(config):
        print("‚úÖ Configura√ß√£o original restaurada")
    else:
        print("‚ùå Falha ao restaurar configura√ß√£o")

if __name__ == "__main__":
    test_admin_functions()