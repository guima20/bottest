#!/usr/bin/env python3
"""
Script de inicializa√ß√£o para o sistema de bots Telegram com interface gr√°fica.
"""

import sys
import os
import subprocess
import tkinter as tk
from tkinter import messagebox

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas."""
    try:
        import telegram
        import dotenv
        return True
    except ImportError as e:
        return False, str(e)

def install_dependencies():
    """Instala as depend√™ncias necess√°rias."""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    """Fun√ß√£o principal de inicializa√ß√£o."""
    print("ü§ñ Iniciando Sistema de Bots Telegram - Kangaroo")
    print("=" * 50)
    
    # Verifica depend√™ncias
    deps_check = check_dependencies()
    if deps_check != True:
        print("‚ùå Depend√™ncias n√£o encontradas. Tentando instalar...")
        if install_dependencies():
            print("‚úÖ Depend√™ncias instaladas com sucesso!")
        else:
            print("‚ùå Erro ao instalar depend√™ncias. Instale manualmente:")
            print("pip install -r requirements.txt")
            return
    
    # Verifica se os arquivos necess√°rios existem
    required_files = [
        'unified_bot.py',
        'admin_bot.py', 
        'bot_messages.py',
        'gui_manager.py',
        'config.json',
        'groups.json',
        'pending_messages.json'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Arquivos necess√°rios n√£o encontrados: {', '.join(missing_files)}")
        return
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados!")
    print("üöÄ Iniciando interface gr√°fica...")
    
    # Inicia a interface gr√°fica
    try:
        from gui_manager import main as gui_main
        gui_main()
    except Exception as e:
        print(f"‚ùå Erro ao iniciar interface gr√°fica: {e}")
        
        # Fallback para interface de linha de comando
        print("\nüîÑ Tentando inicializa√ß√£o alternativa...")
        root = tk.Tk()
        root.withdraw()  # Esconde a janela principal
        
        choice = messagebox.askyesno(
            "Erro na Interface",
            "Erro ao iniciar a interface gr√°fica.\n\n"
            "Deseja tentar iniciar apenas os bots via linha de comando?\n\n"
            "Sim = Iniciar bots\n"
            "N√£o = Sair"
        )
        
        if choice:
            print("ü§ñ Iniciando bots via linha de comando...")
            try:
                # Inicia o bot principal
                print("Iniciando bot principal...")
                subprocess.Popen([sys.executable, "unified_bot.py"])
                
                # Inicia o bot administrativo
                print("Iniciando bot administrativo...")
                subprocess.Popen([sys.executable, "admin_bot.py"])
                
                print("‚úÖ Bots iniciados com sucesso!")
                print("Para parar os bots, use Ctrl+C ou feche este terminal.")
                
                # Mant√©m o script rodando
                try:
                    while True:
                        pass
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è Parando bots...")
                    
            except Exception as e:
                print(f"‚ùå Erro ao iniciar bots: {e}")
        
        root.destroy()

if __name__ == "__main__":
    main()