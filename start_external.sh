#!/bin/bash

# üöÄ Script para iniciar o Sistema Heylink com acesso externo HTTPS
# Autor: OpenHands AI
# Data: 2025-05-24

echo "üöÄ Iniciando Sistema Heylink..."
echo "üìç Diret√≥rio: $(pwd)"

# Ativar ambiente virtual
echo "üîß Ativando ambiente virtual..."
source venv/bin/activate

# Verificar se Flask est√° instalado
if ! python -c "import flask" 2>/dev/null; then
    echo "üì¶ Instalando depend√™ncias..."
    pip install flask requests
fi

# Parar processos anteriores se existirem
echo "üõë Parando processos anteriores..."
pkill -f "python app.py" 2>/dev/null || true
pkill -f "python proxy_server.py" 2>/dev/null || true

# Aguardar um momento para os processos terminarem
sleep 2

# Iniciar aplica√ß√£o Flask na porta 8000
echo "üåê Iniciando aplica√ß√£o Flask na porta 8000..."
python app.py &
FLASK_PID=$!

# Aguardar Flask inicializar
sleep 3

# Verificar se Flask est√° rodando
if ! curl -s http://localhost:8000 > /dev/null; then
    echo "‚ùå Erro: Flask n√£o conseguiu iniciar na porta 8000"
    exit 1
fi

echo "‚úÖ Flask rodando na porta 8000"

# Iniciar proxy para acesso externo
echo "üîó Iniciando proxy para acesso externo..."
python proxy_server.py &
PROXY_PID=$!

# Aguardar proxy inicializar
sleep 3

# Verificar se proxy est√° rodando
PROXY_PORT=$(netstat -tlnp 2>/dev/null | grep python | grep -E ":(9000|9001|8080|8081)" | head -1 | sed 's/.*:\([0-9]*\).*/\1/')

if [ -z "$PROXY_PORT" ]; then
    echo "‚ùå Erro: Proxy n√£o conseguiu iniciar"
    kill $FLASK_PID 2>/dev/null || true
    exit 1
fi

echo "‚úÖ Proxy rodando na porta $PROXY_PORT"

# Informa√ß√µes de acesso
echo ""
echo "üéâ Sistema Heylink iniciado com sucesso!"
echo ""
echo "üì± Acesso Local:"
echo "   http://localhost:8000"
echo "   http://localhost:$PROXY_PORT"
echo ""
echo "üåç Acesso Externo HTTPS:"
echo "   https://work-1-mdxxuukcjoqxwbuo.prod-runtime.all-hands.dev (porta 12000)"
echo "   https://work-2-mdxxuukcjoqxwbuo.prod-runtime.all-hands.dev (porta 12001)"
echo ""
echo "üîß Painel Administrativo:"
echo "   http://localhost:$PROXY_PORT/admin"
echo "   Senha: admin123"
echo ""
echo "üìä Status dos Processos:"
echo "   Flask PID: $FLASK_PID"
echo "   Proxy PID: $PROXY_PID"
echo ""
echo "üõë Para parar o sistema:"
echo "   kill $FLASK_PID $PROXY_PID"
echo "   ou execute: ./stop_system.sh"
echo ""

# Criar script de parada
cat > stop_system.sh << 'EOF'
#!/bin/bash
echo "üõë Parando Sistema Heylink..."
pkill -f "python app.py"
pkill -f "python proxy_server.py"
echo "‚úÖ Sistema parado!"
EOF

chmod +x stop_system.sh

# Manter o script rodando para monitorar
echo "üîç Monitorando sistema... (Ctrl+C para parar)"
echo ""

# Fun√ß√£o para cleanup ao sair
cleanup() {
    echo ""
    echo "üõë Parando sistema..."
    kill $FLASK_PID $PROXY_PID 2>/dev/null || true
    echo "‚úÖ Sistema parado!"
    exit 0
}

# Capturar sinais de interrup√ß√£o
trap cleanup SIGINT SIGTERM

# Loop de monitoramento
while true; do
    # Verificar se Flask ainda est√° rodando
    if ! kill -0 $FLASK_PID 2>/dev/null; then
        echo "‚ùå Flask parou de funcionar!"
        break
    fi
    
    # Verificar se Proxy ainda est√° rodando
    if ! kill -0 $PROXY_PID 2>/dev/null; then
        echo "‚ùå Proxy parou de funcionar!"
        break
    fi
    
    sleep 10
done

cleanup